package org.linus.base.util

import android.annotation.SuppressLint
import android.content.Context
import android.provider.Settings
import androidx.datastore.preferences.core.edit
import dagger.hilt.android.qualifiers.ApplicationContext
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.flow.map
import kotlinx.coroutines.runBlocking
import org.linus.base.util.extension.KEY_DEVICE_UUID
import org.linus.base.util.extension.KEY_USER_ID
import org.linus.base.util.extension.dataStore
import java.io.UnsupportedEncodingException
import java.lang.RuntimeException
import java.util.*
import javax.inject.Inject

class DeviceUuidFactory @Inject constructor(
    @ApplicationContext private val context: Context
) {

    init {
        generateDeviceUuid(context)
    }

    fun getDeviceUuid(): String {
        return  runBlocking {
            context.dataStore.data.map {
                it[KEY_DEVICE_UUID]
            }.first()!!
        }
    }

    /**
     * Returns a unique UUID for the current android device.  As with all UUIDs, this unique ID is "very highly likely"
     * to be unique across all Android devices.  Much more so than ANDROID_ID is.
     *
     * The UUID is generated by using ANDROID_ID as the base key if appropriate, falling back on
     * TelephonyManager.getDeviceID() if ANDROID_ID is known to be incorrect, and finally falling back
     * on a random UUID that's persisted to SharedPreferences if getDeviceID() does not return a
     * usable value.
     *
     * In some rare circumstances, this ID may change.  In particular, if the device is factory reset a new device ID
     * may be generated.  In addition, if a user upgrades their phone from certain buggy implementations of Android 2.2
     * to a newer, non-buggy version of Android, the device ID may change.  Or, if a user uninstalls your app on
     * a device that has neither a proper Android ID nor a Device ID, this ID may change on reinstallation.
     *
     * Note that if the code falls back on using TelephonyManager.getDeviceId(), the resulting ID will NOT
     * change after a factory reset.  Something to be aware of.
     *
     * Works around a bug in Android 2.2 for many devices when using ANDROID_ID directly.
     *
     * @see "http://code.google.com/p/android/issues/detail?id=10603"
     *
     *
     * @return a UUID that may be used to uniquely identify your device for most purposes.
     */
    @SuppressLint("HardwareIds")
    private fun generateDeviceUuid(context: Context) {
        var deviceUuid = runBlocking {
            context.dataStore.data.map {
                it[KEY_USER_ID]
            }.first()
        }
        if (deviceUuid.isNullOrEmpty()) {
            val androidId =
                Settings.Secure.getString(context.contentResolver, Settings.Secure.ANDROID_ID)
            try {
                deviceUuid = UUID.nameUUIDFromBytes(androidId.toByteArray(charset("utf-8"))).toString()
            } catch (e: UnsupportedEncodingException) {
                throw RuntimeException(e)
            }
            runBlocking {
                context.dataStore.edit {
                    it[KEY_DEVICE_UUID] = deviceUuid
                }
            }
        }
    }
}